{"ast":null,"code":"import _objectSpread from \"/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/src/context.js\";\nimport React, { Component } from \"react\"; //import items from \"./data\";\n\nimport Client from \"./Contentful\";\nconst PetContext = React.createContext();\n\nclass PetsProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pets: [],\n      sortedPets: [],\n      newPets: [],\n      loading: true,\n      type: \"all\",\n      age: \"0\",\n      minAge: 0,\n      maxAge: 0,\n      gender: \"all\",\n      breakfast: false,\n      typeDog: [],\n      typeCat: [],\n      flag1: false,\n      flag2: false,\n      dogflag: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await Client.getEntries({\n          content_type: \"pawpal1\",\n          // order: \"sys.createdAt\"\n          order: \"-fields.age\"\n        });\n        let pets = this.formatData(response.items);\n        let newPets = pets.filter(pet => pet.featured === true);\n        let typeDog = pets.filter(pet => pet.type === \"Dog\");\n        let typeCat = pets.filter(pet => pet.type === \"Cat\");\n        let maxAge = Math.max(...pets.map(item => item.age));\n        let minAge = Math.min(...pets.map(item => item.age));\n        this.setState({\n          pets,\n          newPets,\n          typeDog,\n          typeCat,\n          sortedPets: pets,\n          loading: false,\n          age: maxAge,\n          maxAge,\n          minAge\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getPet = id => {\n      let tempPets = [...this.state.pets];\n      const pet = tempPets.find(pet => pet.id === id);\n      return pet;\n    };\n\n    this.getPetType = type => {\n      let tempPetType = [...this.state.pets];\n      const petType = tempPetType.find(pet => pet.type === type);\n      return petType;\n    };\n\n    this.refreshState = () => {\n      let _this$state = this.state,\n          pets = _this$state.pets,\n          maxAge = _this$state.maxAge;\n      this.setState({\n        gender: \"all\",\n        age: maxAge\n      });\n      let typeDogTemp = pets.filter(pet => pet.type === \"Dog\");\n      let typeCatTemp = pets.filter(pet => pet.type === \"Cat\");\n      this.setState({\n        typeDog: typeDogTemp,\n        typeCat: typeCatTemp\n      });\n    };\n\n    this.handleChange = event => {\n      const value = event.target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterPets);\n    };\n\n    this.setFlag1 = () => {\n      this.setState({\n        flag1: true\n      });\n    };\n\n    this.setFlag2 = () => {\n      this.setState({\n        flag2: true\n      });\n    };\n\n    this.unsetFlag1 = () => {\n      this.setState({\n        flag1: false\n      });\n    };\n\n    this.unsetFlag2 = () => {\n      this.setState({\n        flag2: false\n      });\n    };\n\n    this.setDogFlag = () => {\n      this.setState({\n        dogflag: true\n      });\n    };\n\n    this.unsetDogFlag = () => {\n      this.setState({\n        dogflag: false\n      });\n    };\n\n    this.filterPets = () => {\n      let _this$state2 = this.state,\n          pets = _this$state2.pets,\n          gender = _this$state2.gender,\n          age = _this$state2.age;\n      let tempPets = [...pets];\n\n      if (gender !== \"all\") {\n        tempPets = tempPets.filter(pet => pet.gender === gender);\n      }\n\n      tempPets = tempPets.filter(pet => pet.age <= age);\n      let typeDogTemp = tempPets.filter(pet => pet.type === \"Dog\");\n      let typeCatTemp = tempPets.filter(pet => pet.type === \"Cat\");\n      this.setState({\n        typeDog: typeDogTemp,\n        typeCat: typeCatTemp\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  } //------------------End of contentful----------\n  //----------------Local Data------------------\n  // componentDidMount() {\n  //    let pets  = this.formatData(items);\n  //    let newPets = pets.filter(pet => pet.featured === true);\n  //    let typeDog = pets.filter(pet => pet.type === \"Dog\");\n  //    let typeCat = pets.filter(pet => pet.type === \"Cat\");\n  //    let maxAge = Math.max(...pets.map(item => item.age));\n  //    let minAge = Math.min(...pets.map(item => item.age));\n  //  this.setState({\n  //      pets, \n  //      newPets,\n  //      typeDog,\n  //      typeCat,\n  //      sortedPets: pets,\n  //      loading: false,\n  //      age: maxAge,\n  //      maxAge,\n  //      minAge,\n  //    });\n  //  }\n  //----------------End of Local Data------------------\n\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let pet = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return pet;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(PetContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getPet: this.getPet,\n        getPetType: this.getPetType,\n        handleChange: this.handleChange,\n        refreshState: this.refreshState,\n        setFlag1: this.setFlag1,\n        setFlag2: this.setFlag2,\n        unsetFlag1: this.unsetFlag1,\n        unsetFlag2: this.unsetFlag2,\n        unsetDogFlag: this.unsetDogFlag,\n        setDogFlag: this.setDogFlag\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst PetsConsumer = PetContext.Consumer;\nexport function withPetsConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(PetsConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    })));\n  };\n}\nexport { PetsProvider, PetsConsumer, PetContext };","map":{"version":3,"sources":["/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/src/context.js"],"names":["React","Component","Client","PetContext","createContext","PetsProvider","state","pets","sortedPets","newPets","loading","type","age","minAge","maxAge","gender","breakfast","typeDog","typeCat","flag1","flag2","dogflag","getData","response","getEntries","content_type","order","formatData","items","filter","pet","featured","Math","max","map","item","min","setState","error","console","log","getPet","id","tempPets","find","getPetType","tempPetType","petType","refreshState","typeDogTemp","typeCatTemp","handleChange","event","value","target","name","filterPets","setFlag1","setFlag2","unsetFlag1","unsetFlag2","setDogFlag","unsetDogFlag","componentDidMount","tempItems","sys","images","fields","image","file","url","render","props","children","PetsConsumer","Consumer","withPetsConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n//import items from \"./data\";\nimport Client from \"./Contentful\";\nconst PetContext = React.createContext();\nclass PetsProvider extends Component {\n  state = {\n    pets: [],\n    sortedPets: [],\n    newPets: [],\n    loading: true,\n    type: \"all\",\n    age: \"0\",\n    minAge: 0,\n    maxAge: 0,\n    gender: \"all\",\n    breakfast: false,\n    typeDog: [],\n    typeCat: [],\n    flag1: false,\n    flag2: false,\n    dogflag: false\n  };\n  //------------------contentful----------\n     getData = async () => {\n       try {\n         let response = await Client.getEntries({\n           content_type: \"pawpal1\",\n           // order: \"sys.createdAt\"\n           order: \"-fields.age\"\n         });\n       let pets = this.formatData(response.items);\n       let newPets = pets.filter(pet => pet.featured === true);\n       let typeDog = pets.filter(pet => pet.type === \"Dog\");\n       let typeCat = pets.filter(pet => pet.type === \"Cat\");\n       let maxAge = Math.max(...pets.map(item => item.age));\n       let minAge = Math.min(...pets.map(item => item.age));\n       this.setState({\n         pets, \n         newPets,\n         typeDog,\n         typeCat,\n         sortedPets: pets,\n         loading: false,\n         age: maxAge,\n         maxAge,\n         minAge,\n       });\n       } catch (error) {\n         console.log(error);\n       }\n     };\n     componentDidMount() {\n       this.getData();\n     }\n  //------------------End of contentful----------\n\n  //----------------Local Data------------------\n    // componentDidMount() {\n    //    let pets  = this.formatData(items);\n    //    let newPets = pets.filter(pet => pet.featured === true);\n    //    let typeDog = pets.filter(pet => pet.type === \"Dog\");\n    //    let typeCat = pets.filter(pet => pet.type === \"Cat\");\n    //    let maxAge = Math.max(...pets.map(item => item.age));\n    //    let minAge = Math.min(...pets.map(item => item.age));\n    //  this.setState({\n    //      pets, \n    //      newPets,\n    //      typeDog,\n    //      typeCat,\n    //      sortedPets: pets,\n    //      loading: false,\n    //      age: maxAge,\n    //      maxAge,\n    //      minAge,\n    //    });\n    //  }\n//----------------End of Local Data------------------\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n      let pet = { ...item.fields, images, id };\n      return pet;\n    });\n    return tempItems;\n  }\n  getPet = id => {\n    let tempPets = [...this.state.pets];\n    const pet = tempPets.find(pet => pet.id === id);\n    return pet;\n  };\n\n  getPetType = type => {\n    let tempPetType = [...this.state.pets];\n    const petType = tempPetType.find(pet => pet.type === type);\n    return petType;\n  }\n  refreshState = () => {\n    let {\n      pets,\n      maxAge\n    } = this.state;\n    this.setState(\n      {\n        gender: \"all\",\n        age: maxAge\n      });\n      let typeDogTemp = pets.filter(pet => pet.type === \"Dog\");\n      let typeCatTemp = pets.filter(pet => pet.type === \"Cat\");\n      this.setState({\n       typeDog: typeDogTemp,\n       typeCat: typeCatTemp\n      });\n  }\n  handleChange = event => {\n    const value = event.target.value;\n    const name = event.target.name;\n    this.setState(\n       {\n         [name]: value\n       },\n       this.filterPets   \n     );\n  };\n   setFlag1 = () => {\n    this.setState(\n      {\n        flag1: true\n      }  \n    );\n   }\n   setFlag2 = () => {\n    this.setState(\n      {\n        flag2: true\n      }  \n    );\n    \n   }\n   unsetFlag1 = () => {\n    this.setState(\n      {\n        flag1: false\n      }  \n    );\n   }\n   unsetFlag2 = () => {\n    this.setState(\n      {\n        flag2: false\n      }  \n    );\n   }\n\n   setDogFlag = () => {\n    this.setState(\n      {\n        dogflag: true\n      }  \n    );   \n   }\n   unsetDogFlag = () => {\n    this.setState(\n      {\n        dogflag: false\n      }  \n    );\n   } \n   filterPets = () => {\n     let {\n       pets,\n       gender,\n       age\n     } = this.state;\n      let tempPets = [...pets];\n      if (gender !== \"all\") {\n       tempPets = tempPets.filter(pet => pet.gender === gender);\n      }\n     tempPets = tempPets.filter(pet => pet.age <= age);\n     let typeDogTemp = tempPets.filter(pet => pet.type === \"Dog\");\n     let typeCatTemp = tempPets.filter(pet => pet.type === \"Cat\");\n      this.setState({\n       typeDog: typeDogTemp,\n       typeCat: typeCatTemp\n      });\n   };\n render() {\n    return (\n      <PetContext.Provider\n       value={{\n         ...this.state,\n           getPet: this.getPet,\n           getPetType: this.getPetType,\n           handleChange: this.handleChange,\n           refreshState: this.refreshState,\n           setFlag1: this.setFlag1,\n           setFlag2: this.setFlag2,\n           unsetFlag1: this.unsetFlag1,\n           unsetFlag2: this.unsetFlag2,\n           unsetDogFlag: this.unsetDogFlag,\n           setDogFlag: this.setDogFlag\n         }}\n       >\n         {this.props.children}\n       </PetContext.Provider>\n     );\n   }\n}\n\nconst PetsConsumer = PetContext.Consumer;\nexport function withPetsConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return (\n      <PetsConsumer>\n        {value => <Component {...props} context={value} />}\n      </PetsConsumer>\n    );\n  };\n}\n\nexport { PetsProvider, PetsConsumer, PetContext };\n"]},"metadata":{},"sourceType":"module"}