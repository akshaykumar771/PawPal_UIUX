{"ast":null,"code":"import _objectSpread from \"/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\"; // import Client from \"./Contentful\";\n\nconst PetContext = React.createContext(); // <RoomContext.Provider value={'hello'}\n\nclass PetsProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pets: [],\n      sortedPets: [],\n      newPets: [],\n      loading: true,\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n  }\n\n  // getData\n  // getData = async () => {\n  //   try {\n  //     let response = await Client.getEntries({\n  //       content_type: \"beachResortRoom\",\n  //       // order: \"sys.createdAt\"\n  //       order: \"-fields.price\"\n  //     });\n  //     let rooms = this.formatData(response.items);\n  //     let featuredRooms = rooms.filter(room => room.featured === true);\n  //     let maxPrice = Math.max(...rooms.map(item => item.price));\n  //     let maxSize = Math.max(...rooms.map(item => item.size));\n  //     this.setState({\n  //       rooms,\n  //       featuredRooms,\n  //       sortedRooms: rooms,\n  //       loading: false,\n  //       price: maxPrice,\n  //       maxPrice,\n  //       maxSize\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n  componentDidMount() {\n    // this.getData();\n    let pets = this.formatData(items);\n    let newPets = pets.filter(pet => pet.featured === true); //let maxPrice = Math.max(...rooms.map(item => item.price));\n    //let maxSize = Math.max(...rooms.map(item => item.size));\n\n    this.setState({\n      pets,\n      newPets,\n      sortedPets: pets,\n      loading: false\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let pet = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return pet;\n    });\n    return tempItems;\n  } //   getRoom = slug => {\n  //     let tempRooms = [...this.state.rooms];\n  //     const room = tempRooms.find(room => room.slug === slug);\n  //     return room;\n  //   };\n  //   handleChange = event => {\n  //     const target = event.target;\n  //     const value = target.type === \"checkbox\" ? target.checked : target.value;\n  //     const name = event.target.name;\n  //     this.setState(\n  //       {\n  //         [name]: value\n  //       },\n  //       this.filterRooms\n  //     );\n  //   };\n  //   filterRooms = () => {\n  //     let {\n  //       rooms,\n  //       type,\n  //       capacity,\n  //       price,\n  //       minSize,\n  //       maxSize,\n  //       breakfast,\n  //       pets\n  //     } = this.state;\n  //     // all the rooms\n  //     let tempRooms = [...rooms];\n  //     // transform value\n  //     capacity = parseInt(capacity);\n  //     price = parseInt(price);\n  //     // filter by type\n  //     if (type !== \"all\") {\n  //       tempRooms = tempRooms.filter(room => room.type === type);\n  //     }\n  //     // filter by capacity\n  //     if (capacity !== 1) {\n  //       tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n  //     }\n  //     // filter by price\n  //     tempRooms = tempRooms.filter(room => room.price <= price);\n  //     // filter by size\n  //     tempRooms = tempRooms.filter(\n  //       room => room.size >= minSize && room.size <= maxSize\n  //     );\n  //     // filter by breakfast\n  //     if (breakfast) {\n  //       tempRooms = tempRooms.filter(room => room.breakfast === true);\n  //     }\n  //     // filter by pets\n  //     if (pets) {\n  //       tempRooms = tempRooms.filter(room => room.pets === true);\n  //     }\n  //     // change state\n  //     this.setState({\n  //       sortedRooms: tempRooms\n  //     });\n  //   };\n\n\n  render() {\n    return React.createElement(PetContext.Provider, {\n      value: _objectSpread({}, this.state),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n} // const PetsConsumer = PetContext.Consumer;\n// export function withRoomConsumer(Component) {\n//   return function ConsumerWrapper(props) {\n//     return (\n//       <RoomConsumer>\n//         {value => <Component {...props} context={value} />}\n//       </RoomConsumer>\n//     );\n//   };\n//}\n\n\nexport { PetsProvider, PetContext };","map":{"version":3,"sources":["/Users/gautamr2590/Documents/PawPal/PawPal_UIUX/pawpal/src/context.js"],"names":["React","Component","items","PetContext","createContext","PetsProvider","state","pets","sortedPets","newPets","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","componentDidMount","formatData","filter","pet","featured","setState","tempItems","map","item","id","sys","images","fields","image","file","url","render","props","children"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,QAAlB,C,CACA;;AAEA,MAAMC,UAAU,GAAGH,KAAK,CAACI,aAAN,EAAnB,C,CACA;;AACA,MAAMC,YAAN,SAA2BJ,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACnCK,KADmC,GAC3B;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,UAAU,EAAE,EAFN;AAGNC,MAAAA,OAAO,EAAE,EAHH;AAINC,MAAAA,OAAO,EAAE,IAJH;AAKNC,MAAAA,IAAI,EAAE,KALA;AAMNC,MAAAA,QAAQ,EAAE,CANJ;AAONC,MAAAA,KAAK,EAAE,CAPD;AAQNC,MAAAA,QAAQ,EAAE,CARJ;AASNC,MAAAA,QAAQ,EAAE,CATJ;AAUNC,MAAAA,OAAO,EAAE,CAVH;AAWNC,MAAAA,OAAO,EAAE,CAXH;AAYNC,MAAAA,SAAS,EAAE,KAZL;AAaNX,MAAAA,IAAI,EAAE;AAbA,KAD2B;AAAA;;AAgBnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAY,EAAAA,iBAAiB,GAAG;AAClB;AACA,QAAIZ,IAAI,GAAI,KAAKa,UAAL,CAAgBlB,KAAhB,CAAZ;AACA,QAAIO,OAAO,GAAGF,IAAI,CAACc,MAAL,CAAYC,GAAG,IAAIA,GAAG,CAACC,QAAJ,KAAiB,IAApC,CAAd,CAHkB,CAIlB;AACA;;AACA,SAAKC,QAAL,CAAc;AACZjB,MAAAA,IADY;AAEZE,MAAAA,OAFY;AAGZD,MAAAA,UAAU,EAAED,IAHA;AAIZG,MAAAA,OAAO,EAAE;AAJG,KAAd;AAMD;;AAEDU,EAAAA,UAAU,CAAClB,KAAD,EAAQ;AAChB,QAAIuB,SAAS,GAAGvB,KAAK,CAACwB,GAAN,CAAUC,IAAI,IAAI;AAChC,UAAIC,EAAE,GAAGD,IAAI,CAACE,GAAL,CAASD,EAAlB;AACA,UAAIE,MAAM,GAAGH,IAAI,CAACI,MAAL,CAAYD,MAAZ,CAAmBJ,GAAnB,CAAuBM,KAAK,IAAIA,KAAK,CAACD,MAAN,CAAaE,IAAb,CAAkBC,GAAlD,CAAb;;AAEA,UAAIZ,GAAG,qBAAQK,IAAI,CAACI,MAAb;AAAqBD,QAAAA,MAArB;AAA6BF,QAAAA;AAA7B,QAAP;;AACA,aAAON,GAAP;AACD,KANe,CAAhB;AAOA,WAAOG,SAAP;AACD,GAlEkC,CAmErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCU,EAAAA,MAAM,GAAG;AACN,WACE,oBAAC,UAAD,CAAY,QAAZ;AACC,MAAA,KAAK,oBACA,KAAK7B,KADL,CADN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOI,KAAK8B,KAAL,CAAWC,QAPf,CADF;AAWA;;AA7IiC,C,CAgJrC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAShC,YAAT,EAAuBF,UAAvB","sourcesContent":["import React, { Component } from \"react\";\nimport items from \"./data\";\n// import Client from \"./Contentful\";\n\nconst PetContext = React.createContext();\n// <RoomContext.Provider value={'hello'}\nclass PetsProvider extends Component {\n  state = {\n    pets: [],\n    sortedPets: [],\n    newPets: [],\n    loading: true,\n    type: \"all\",\n    capacity: 1,\n    price: 0,\n    minPrice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    breakfast: false,\n    pets: false\n  };\n  // getData\n  // getData = async () => {\n  //   try {\n  //     let response = await Client.getEntries({\n  //       content_type: \"beachResortRoom\",\n  //       // order: \"sys.createdAt\"\n  //       order: \"-fields.price\"\n  //     });\n  //     let rooms = this.formatData(response.items);\n  //     let featuredRooms = rooms.filter(room => room.featured === true);\n  //     let maxPrice = Math.max(...rooms.map(item => item.price));\n  //     let maxSize = Math.max(...rooms.map(item => item.size));\n\n  //     this.setState({\n  //       rooms,\n  //       featuredRooms,\n  //       sortedRooms: rooms,\n  //       loading: false,\n  //       price: maxPrice,\n  //       maxPrice,\n  //       maxSize\n  //     });\n  //   } catch (error) {\n  //     console.log(error);\n  //   }\n  // };\n\n  componentDidMount() {\n    // this.getData();\n    let pets  = this.formatData(items);\n    let newPets = pets.filter(pet => pet.featured === true);\n    //let maxPrice = Math.max(...rooms.map(item => item.price));\n    //let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      pets, \n      newPets,\n      sortedPets: pets,\n      loading: false,\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let pet = { ...item.fields, images, id };\n      return pet;\n    });\n    return tempItems;\n  }\n//   getRoom = slug => {\n//     let tempRooms = [...this.state.rooms];\n//     const room = tempRooms.find(room => room.slug === slug);\n//     return room;\n//   };\n//   handleChange = event => {\n//     const target = event.target;\n//     const value = target.type === \"checkbox\" ? target.checked : target.value;\n//     const name = event.target.name;\n\n//     this.setState(\n//       {\n//         [name]: value\n//       },\n//       this.filterRooms\n//     );\n//   };\n//   filterRooms = () => {\n//     let {\n//       rooms,\n//       type,\n//       capacity,\n//       price,\n//       minSize,\n//       maxSize,\n//       breakfast,\n//       pets\n//     } = this.state;\n//     // all the rooms\n//     let tempRooms = [...rooms];\n//     // transform value\n//     capacity = parseInt(capacity);\n//     price = parseInt(price);\n\n//     // filter by type\n//     if (type !== \"all\") {\n//       tempRooms = tempRooms.filter(room => room.type === type);\n//     }\n\n//     // filter by capacity\n//     if (capacity !== 1) {\n//       tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n//     }\n//     // filter by price\n//     tempRooms = tempRooms.filter(room => room.price <= price);\n//     // filter by size\n//     tempRooms = tempRooms.filter(\n//       room => room.size >= minSize && room.size <= maxSize\n//     );\n//     // filter by breakfast\n//     if (breakfast) {\n//       tempRooms = tempRooms.filter(room => room.breakfast === true);\n//     }\n//     // filter by pets\n//     if (pets) {\n//       tempRooms = tempRooms.filter(room => room.pets === true);\n//     }\n//     // change state\n//     this.setState({\n//       sortedRooms: tempRooms\n//     });\n//   };\n render() {\n    return (\n      <PetContext.Provider\n       value={{\n         ...this.state\n//           getRoom: this.getRoom,\n//           handleChange: this.handleChange\n         }}\n       >\n         {this.props.children}\n       </PetContext.Provider>\n     );\n   }\n}\n\n// const PetsConsumer = PetContext.Consumer;\n\n// export function withRoomConsumer(Component) {\n//   return function ConsumerWrapper(props) {\n//     return (\n//       <RoomConsumer>\n//         {value => <Component {...props} context={value} />}\n//       </RoomConsumer>\n//     );\n//   };\n//}\n\nexport { PetsProvider, PetContext };\n"]},"metadata":{},"sourceType":"module"}